---
openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: AuthenticationController
  description: This is the Authentication Controller for the application. It has all
    endpoints for the Authentication entity.
- name: BookingController
  description: This is the Booking Controller for the application. It has all endpoints
    for the Booking entity.
- name: UserController
  description: This is the User Controller for the application. It has all endpoints
    for the User entity.
- name: OfficeController
  description: This is the Office Controller for the application. It has all endpoints
    for the Office entity.
- name: RatingController
  description: This is the Rating Controller for the application. It has all endpoints
    for the Rating entity.
paths:
  "/api/user/update":
    put:
      tags:
      - UserController
      summary: updating user details
      description: This endpoint is used to update the user details in the database.
        It takes in a user object and returns the updated userResponse object. It
        is accessible to all users.
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDto"
  "/api/rating/{RatingId}":
    put:
      tags:
      - RatingController
      summary: updating a rating
      description: This endpoint is used to update a rating in the database. It takes
        in a rating object and the rating id and returns the updated ratingResponse
        object. It is accessible to all users for their ratings.
      operationId: updateRating
      parameters:
      - name: RatingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RatingDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
    delete:
      tags:
      - RatingController
      summary: deleting a rating
      description: This endpoint is used to delete a rating from the database. It
        takes in the rating id and returns a response entity of rating. It is accessible
        to all users for their ratings.
      operationId: deleteRating
      parameters:
      - name: RatingId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/office/{officeId}":
    put:
      tags:
      - OfficeController
      summary: updating an office
      description: This endpoint is used to update an office in the database. It takes
        in an office object and the office id and returns the updated officeResponse
        object. It is accessible only to admin.
      operationId: updateOffice
      parameters:
      - name: officeId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OfficeDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OfficeResponse"
    delete:
      tags:
      - OfficeController
      summary: deleting an office
      description: This endpoint is used to delete an office from the database. It
        takes in the office id and returns a response entity of office. It is accessible
        only to admin.
      operationId: deleteOffice
      parameters:
      - name: officeId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/booking/{bookingId}":
    put:
      tags:
      - BookingController
      summary: updating a booking
      description: This endpoint is used to update a booking in the database. It takes
        in a booking object and the booking id and returns the updated bookingResponse
        object. It is accessible to all users for their bookings
      operationId: updateBooking
      parameters:
      - name: bookingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BookingDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/BookingResponse"
    delete:
      tags:
      - BookingController
      summary: deleting a booking
      description: This endpoint is used to delete a booking from the database. It
        takes in the booking id and returns a response entity of booking. It is accessible
        to actual user for their bookings and to admin for all bookings.
      operationId: deleteBooking
      parameters:
      - name: bookingId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
  "/api/auth/change-password":
    put:
      tags:
      - AuthenticationController
      summary: changing password
      description: This endpoint is used to change the password of a user in the database.
        It takes in a passwordChange object and returns a response entity. It is accessible
        to all users.
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PasswordChange"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/rating/{OfficeId}":
    get:
      tags:
      - RatingController
      summary: getting all ratings by office id
      description: This endpoint is used to get all the ratings in the database by
        office id. It returns a list of all the ratings. It is accessible to all users.
      operationId: getRatingById
      parameters:
      - name: OfficeId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RatingResponse"
    post:
      tags:
      - RatingController
      summary: adding a rating
      description: This endpoint is used to add a rating to the database. It takes
        in a rating object and the office id and returns the added ratingResponse
        object. It is accessible to all users.
      operationId: addRating
      parameters:
      - name: OfficeId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RatingDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/office":
    get:
      tags:
      - OfficeController
      summary: getting all offices
      description: This endpoint is used to get all the offices in the database. It
        returns a list of all the offices. It is accessible to all users.
      operationId: getAllOffices
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/OfficeResponse"
    post:
      tags:
      - OfficeController
      summary: adding an office
      description: This endpoint is used to add an office to the database. It takes
        in an office object and returns the added officeResponse object. It is accessible
        only to admin.
      operationId: addOffice
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OfficeDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OfficeResponse"
  "/api/office/search":
    post:
      tags:
      - OfficeController
      summary: searching for an office by parameters
      description: This endpoint is used to search for an office by its parameters.
        It takes in the search parameters and returns a list of officeResponse objects.
        It is accessible to all users.
      operationId: searchOffice
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SearchParams"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/OfficeResponse"
  "/api/booking/{officeId}":
    get:
      tags:
      - BookingController
      summary: getting all bookings by office id
      description: This endpoint is used to get all the bookings in the database by
        office id. It returns a list of all the bookings. It is accessible to admin.
      operationId: getBookingsByOfficeId
      parameters:
      - name: officeId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BookingResponse"
    post:
      tags:
      - BookingController
      summary: creating a booking
      description: This endpoint is used to create a booking in the database. It takes
        in a booking object and the office id and returns the added bookingResponse
        object. It is accessible to all users.
      operationId: createBooking
      parameters:
      - name: officeId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BookingDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/BookingResponse"
  "/api/auth/register":
    post:
      tags:
      - AuthenticationController
      summary: registering a user
      description: This endpoint is used to register a user in the database. It takes
        in a register object and returns the authenticationResponse object. It is
        accessible to all users.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RegisterDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/AuthenticationResponse"
  "/api/auth/authenticate":
    post:
      tags:
      - AuthenticationController
      summary: authenticating a user
      description: This endpoint is used to authenticate a user in the database. It
        takes in a login object and returns the authenticationResponse object. It
        is accessible to all users.
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/AuthenticationResponse"
  "/api/user/email-search/{email}":
    get:
      tags:
      - UserController
      summary: getting user by email
      description: This endpoint is used to get the user by email. It returns the
        user details. It is accessible to admin.
      operationId: getUserByEmail
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDto"
  "/api/user/details":
    get:
      tags:
      - UserController
      summary: getting user details
      description: This endpoint is used to get the details of the user. It returns
        the user details. It is accessible to all users.
      operationId: getDetails
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDto"
  "/api/user/all-users":
    get:
      tags:
      - UserController
      summary: getting all users
      description: This endpoint is used to get all the users in the database. It
        returns a list of all the users. It is accessible to admin.
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserDto"
  "/api/rating/my-ratings":
    get:
      tags:
      - RatingController
      summary: getting all user ratings
      description: This endpoint is used to get all the ratings in the database that
        belongs to user. It returns a list of all the ratings. It is accessible to
        all users for their ratings.
      operationId: getRatingByUserId
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/office/{id}":
    get:
      tags:
      - OfficeController
      summary: getting an office by id
      description: This endpoint is used to get an office by its id. It takes in the
        office id and returns the officeResponse object. It is accessible to all users.
      operationId: getOfficeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/OfficeResponse"
  "/api/office/searchByOfficeName/{officeName}":
    get:
      tags:
      - OfficeController
      summary: searching for an office by name
      description: This endpoint is used to search for an office by its name. It takes
        in the office name and returns a list of officeResponse objects. It is accessible
        to all users.
      operationId: searchOfficeByName
      parameters:
      - name: officeName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/OfficeResponse"
  "/api/booking/offices/{officeName}":
    get:
      tags:
      - BookingController
      summary: getting all bookings by office name
      description: This endpoint is used to get all the bookings in the database by
        office name. It returns a list of all the bookings. It is accessible to admin.
      operationId: getBookingsByOfficeName
      parameters:
      - name: officeName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BookingResponse"
  "/api/booking/my-bookings":
    get:
      tags:
      - BookingController
      summary: getting all bookings
      description: This endpoint is used to get all the bookings in the database.
        It returns a list of all the bookings that belong to user. It is accessible
        to the all users.
      operationId: getBookingsByUserId
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BookingResponse"
  "/api/booking/all-bookings":
    get:
      tags:
      - BookingController
      summary: getting all bookings
      description: This endpoint is used to get all the bookings in the database.
        It returns a list of all the bookings. It is accessible to admin.
      operationId: getAllBookings
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BookingResponse"
  "/api/user/delete-my-account":
    delete:
      tags:
      - UserController
      summary: deleting my account
      description: This endpoint is used to delete the user from the database. It
        returns a response entity of user. It is accessible to all users.
      operationId: deleteMyAccount
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/user/delete-admin/{email}":
    delete:
      tags:
      - UserController
      summary: deleting a user by email
      description: This endpoint is used to delete a user from the database. It takes
        in the email and returns a response entity of user. It is accessible to admin.
      operationId: deleteUser
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
components:
  schemas:
    UserDto:
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    RatingDto:
      type: object
      properties:
        ratingValue:
          type: number
          format: double
        comment:
          type: string
    OfficeDto:
      type: object
      properties:
        officeName:
          type: string
        officeAddress:
          type: string
        facilities:
          type: string
        contactInfo:
          type: string
        price:
          type: number
          format: double
        wifi:
          type: boolean
        city:
          type: string
        capacity:
          type: number
          format: double
        image:
          type: string
          format: url
    OfficeResponse:
      type: object
      properties:
        officeId:
          type: string
        officeName:
          type: string
        officeAddress:
          type: string
        facilities:
          type: string
        contactInfo:
          type: string
        price:
          type: number
          format: double
        wifi:
          type: boolean
        city:
          type: string
        capacity:
          type: number
          format: double
        image:
          type: string
          format: url
    BookingDto:
      type: object
      properties:
        officeId:
          type: string
        startDateTime:
          type: string
        endDateTime:
          type: string
        origin:
          type: string
    BookingResponse:
      type: object
      properties:
        bookingId:
          type: string
        office:
          "$ref": "#/components/schemas/OfficeResponse"
        user:
          "$ref": "#/components/schemas/UserDto"
        startDateTime:
          type: string
        endDateTime:
          type: string
        officeImage:
          type: string
          format: url
        origin:
          type: string
    PasswordChange:
      type: object
      properties:
        newPassword:
          type: string
        oldPassword:
          type: string
    SearchParams:
      type: object
      properties:
        city:
          type: string
        startDateTime:
          type: string
        endDateTime:
          type: string
        sortByPrice:
          type: string
        minimumRating:
          type: number
          format: double
        wifi:
          type: boolean
        minimumPrice:
          type: number
          format: double
        maximumPrice:
          type: number
          format: double
        minimumCapacity:
          type: number
          format: double
        maximumCapacity:
          type: number
          format: double
    RegisterDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
          - USER
          - ADMIN
    AuthenticationResponse:
      type: object
      properties:
        token:
          type: string
    LoginDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    RatingResponse:
      type: object
      properties:
        ratingId:
          type: string
        officeName:
          type: string
        userFirstName:
          type: string
        userLastName:
          type: string
        ratingValue:
          type: number
          format: double
        comment:
          type: string
